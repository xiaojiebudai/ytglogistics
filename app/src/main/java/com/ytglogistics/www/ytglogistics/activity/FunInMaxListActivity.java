package com.ytglogistics.www.ytglogistics.activity;import android.content.Intent;import android.os.Bundle;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.view.View;import android.widget.AdapterView;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.TextView;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.ytglogistics.www.ytglogistics.MyApplication;import com.ytglogistics.www.ytglogistics.R;import com.ytglogistics.www.ytglogistics.adapter.FunInMaxListAdapter;import com.ytglogistics.www.ytglogistics.api.Api;import com.ytglogistics.www.ytglogistics.been.AppInMax;import com.ytglogistics.www.ytglogistics.been.AppInResult;import com.ytglogistics.www.ytglogistics.been.DataCbm;import com.ytglogistics.www.ytglogistics.been.PrintInfo;import com.ytglogistics.www.ytglogistics.dialog.CommonDialog;import com.ytglogistics.www.ytglogistics.dialog.InputDialog;import com.ytglogistics.www.ytglogistics.dialog.SelectBTDialog;import com.ytglogistics.www.ytglogistics.utils.Consts;import com.ytglogistics.www.ytglogistics.utils.DialogUtils;import com.ytglogistics.www.ytglogistics.utils.ParamsUtils;import com.ytglogistics.www.ytglogistics.utils.RegexUtil;import com.ytglogistics.www.ytglogistics.utils.SharedPreferenceUtils;import com.ytglogistics.www.ytglogistics.utils.TimeUtil;import com.ytglogistics.www.ytglogistics.utils.WWToast;import com.ytglogistics.www.ytglogistics.utils.ZLog;import com.ytglogistics.www.ytglogistics.utils.preDefiniation;import com.ytglogistics.www.ytglogistics.xutils.WWXCallBack;import org.xutils.http.RequestParams;import org.xutils.x;import java.math.BigDecimal;import java.text.DecimalFormat;import java.util.ArrayList;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;/** * Created by Administrator on 2016/12/9. */public class FunInMaxListActivity extends FatherActivity {    @BindView(R.id.lv_data)    ListView lvData;    @BindView(R.id.ll_title_0)    LinearLayout llTitle0;    @BindView(R.id.ll_title_1)    LinearLayout llTitle1;    private FunInMaxListAdapter adapter;    private AppInResult result;    @BindView(R.id.tv_lh_input)    TextView tvLhInput;    @BindView(R.id.tv_conmit)    TextView tvConmit;    @BindView(R.id.tv_print)    TextView tvPrint;    @BindView(R.id.ll_operate)    LinearLayout llOperate;    @BindView(R.id.tv_po)    TextView tvPo;    @BindView(R.id.tv_skn)    TextView tvSkn;    @BindView(R.id.tv_num)    EditText tvNum;    @BindView(R.id.tv_pcs)    EditText tvPcs;    @BindView(R.id.tv_geshu)    TextView tvGeshu;    @BindView(R.id.tv_cangwei)    EditText tvCangwei;    @BindView(R.id.tv_one_weight)    EditText tvOneWeight;    @BindView(R.id.tv_weight)    TextView tvWeight;    @BindView(R.id.tv_length)    EditText tvLength;    @BindView(R.id.tv_one_wigth)    EditText tvOneWigth;    @BindView(R.id.tv_one_height)    EditText tvOneHeight;    @BindView(R.id.tv_cbm)    TextView tvCbm;    @BindView(R.id.tv_bkcbm)    TextView tvBkcbm;    @BindView(R.id.tv_cbmrate)    TextView tvCbmrate;    @BindView(R.id.tv_xiangbang)    EditText tvXiangbang;    private InputDialog dialog;    private AppInMax inMax;    private ArrayList<DataCbm> lsit = new ArrayList<DataCbm>();    private int selectPosition = -1;    private ArrayList<AppInMax> appInMaxes;    private DecimalFormat df, df1;    private boolean isChange = false;    private int modelDbk = 0;    @Override    protected int getLayoutId() {        return R.layout.act_funinmaxlist;    }    @Override    protected void initValues() {        context = (MyApplication) getApplicationContext();        modelDbk = getIntent().getIntExtra(MainActivity.KEY_IN_TYPE, 0);        initDefautHead(modelDbk == MainActivity.DBK_IN ? "DBK入仓修改" : "入仓修改", false);        if (modelDbk == MainActivity.DBK_IN) {            llTitle1.setVisibility(View.VISIBLE);            llTitle0.setVisibility(View.GONE);        } else {            llTitle0.setVisibility(View.VISIBLE);            llTitle1.setVisibility(View.GONE);        }        View left = findViewById(R.id.rl_head_left);        if (left != null) {            left.findViewById(R.id.tv_head_left).setBackgroundResource(                    R.mipmap.arrow_back);            left.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    if (isChange) {                        showBackTips();                    } else {                        back();                    }                }            });        }        result = JSON.parseObject(getIntent().getStringExtra(Consts.KEY_DATA), AppInResult.class);    }    private void showBackTips() {        final CommonDialog commonDialogTwiceConfirm = DialogUtils.getCommonDialogTwiceConfirm(FunInMaxListActivity.this, "请确认数据修改已经提交，是否放弃修改离开当前页面？", true);        commonDialogTwiceConfirm.setRightButtonCilck(new View.OnClickListener() {            @Override            public void onClick(View v) {                commonDialogTwiceConfirm.dismiss();                back();            }        });        commonDialogTwiceConfirm.show();    }    @Override    public void onBackPressed() {        if (isChange) {            showBackTips();        } else {            back();        }    }    @Override    protected void initView() {        View right = findViewById(R.id.rl_head_right);        final TextView text = (TextView) findViewById(R.id.tv_head_right);        text.setText(SharedPreferenceUtils.getInstance().getIsWifi() ? R.string.wifi : R.string.bluetooth);        right.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                SharedPreferenceUtils.getInstance().saveIsWifi(!SharedPreferenceUtils.getInstance().getIsWifi());                if (context.getState() > 0) {                    context.getObject().CON_CloseDevices(context.getState());                }                text.setText(SharedPreferenceUtils.getInstance().getIsWifi() ? R.string.wifi : R.string.bluetooth);                context.setState(0);            }        });        adapter = new FunInMaxListAdapter(this,modelDbk);        lvData.setAdapter(adapter);        df = new DecimalFormat("######0.00");        df1 = new DecimalFormat("######0.000");        lvData.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                selectPosition = position;                inMax = adapter.getData().get(position);                tvPo.setText(inMax.Po);                tvSkn.setText(inMax.Skn);                tvNum.setText(numderIntFormat(inMax.Soquan));                tvPcs.setText(numderDoubleFormat(inMax.Format));                tvGeshu.setText(numderIntFormat(inMax.Ttlpcs));                tvCangwei.setText(TextUtils.isEmpty(inMax.Loca) ? "" : inMax.Loca);                tvOneWeight.setText(numderDoubleFormat(inMax.Unitwei));                tvWeight.setText(inMax.Rweight > 0 ? df.format((inMax.Rweight)) + "" : "");                tvLength.setText(numderDoubleFormat(inMax.Leng));                tvOneWigth.setText(numderDoubleFormat(inMax.Wide));                tvOneHeight.setText(numderDoubleFormat(inMax.High));                tvCbm.setText(inMax.Cbm > 0 ? df1.format((inMax.Cbm)) + "" : "");                tvBkcbm.setText(inMax.BookingCbm > 0 ? df1.format(inMax.BookingCbm) : "");                tvCbmrate.setText(Math.abs(inMax.CbmRate) > 0 ? df.format((inMax.CbmRate * 100)) + "%" : "");                tvXiangbang.setText(numderIntFormat(inMax.PaperCtn));                adapter.setPos(position);            }        });        tvCangwei.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s)) {                    if (selectPosition == -1) {                        WWToast.showShort("请先选择一条记录");                    } else {                        adapter.getData().get(selectPosition).Loca = s + "";                        isChange = true;                    }                }            }        });        tvOneWeight.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s)) {                    if (selectPosition == -1) {                        WWToast.showShort("请先选择一条记录");                    } else {                        adapter.getData().get(selectPosition).Unitwei = Double.valueOf(s + "");                        setAllWeight(adapter.getData().get(selectPosition).Unitwei, adapter.getData().get(selectPosition).Soquan);                        isChange = true;                        refreshOtherWeightItem(selectPosition);                    }                }            }        });        tvLength.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s)) {                    if (selectPosition == -1) {                        WWToast.showShort("请先选择一条记录");                    } else {                        adapter.getData().get(selectPosition).Leng = Double.valueOf(s + "");                        setCbm(adapter.getData().get(selectPosition));                        isChange = true;                        refreshOtherItem(selectPosition);                    }                }            }        });        tvOneWigth.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s)) {                    if (selectPosition == -1) {                        WWToast.showShort("请先选择一条记录");                    } else {                        adapter.getData().get(selectPosition).Wide = Double.valueOf(s + "");                        setCbm(adapter.getData().get(selectPosition));                        isChange = true;                        refreshOtherItem(selectPosition);                    }                }            }        });        tvOneHeight.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s)) {                    if (selectPosition == -1) {                        WWToast.showShort("请先选择一条记录");                    } else {                        adapter.getData().get(selectPosition).High = Double.valueOf(s + "");                        setCbm(adapter.getData().get(selectPosition));                        isChange = true;                        refreshOtherItem(selectPosition);                    }                }            }        });        tvNum.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s)) {                    if (selectPosition == -1) {                        WWToast.showShort("请先选择一条记录");                    } else {                        adapter.getData().get(selectPosition).Soquan = Integer.valueOf(s + "");                        setGeshu(adapter.getData().get(selectPosition));                        setAllWeight(adapter.getData().get(selectPosition).Unitwei, adapter.getData().get(selectPosition).Soquan);                        setCbm(adapter.getData().get(selectPosition));                        isChange = true;                    }                }            }        });        tvPcs.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s)) {                    if (selectPosition == -1) {                        WWToast.showShort("请先选择一条记录");                    } else {                        adapter.getData().get(selectPosition).Format = Double.valueOf(s + "");                        setGeshu(adapter.getData().get(selectPosition));                        isChange = true;                    }                }            }        });        tvXiangbang.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s)) {                    if (selectPosition == -1) {                        WWToast.showShort("请先选择一条记录");                    } else {                        adapter.getData().get(selectPosition).PaperCtn = Integer.valueOf(s + "");                        isChange = true;                    }                }            }        });    }    private void setGeshu(AppInMax appInMax) {        appInMax.Ttlpcs= (int) (appInMax.Soquan*appInMax.Format);        tvGeshu.setText(numderIntFormat(inMax.Ttlpcs));    }    private void refreshOtherWeightItem(int selectPosition) {        if (modelDbk == MainActivity.DBK_IN) {            int size = adapter.getData().size();            AppInMax selectItem = adapter.getData().get(selectPosition);            for (int i = 0; i < size; i++) {                AppInMax item = adapter.getData().get(i);                if (i != selectPosition) {                    if (selectItem.So.equals(item.So) && selectItem.Po.equals(item.Po) && selectItem.Skn.equals(item.Skn)) {                        item.Unitwei = selectItem.Unitwei;                        item.Rweight = item.Unitwei * item.Soquan;                        BigDecimal b = new BigDecimal(item.Rweight);                        item.Rweight = b.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();                    }                }            }        }    }    /**     * 按DBK取完以后,同一个SO+PO+SKN就会有9条记录,所以当输入一行的长宽高时,可以同步更新其它8行的长宽高,同时对应CBM也自动更新.     *     * @param selectPosition     */    private void refreshOtherItem(int selectPosition) {        if (modelDbk == MainActivity.DBK_IN) {            int size = adapter.getData().size();            AppInMax selectItem = adapter.getData().get(selectPosition);            if (selectItem.Leng == 0 || selectItem.Wide == 0 || selectItem.High == 0 || selectItem.Soquan == 0 || selectItem.BookingCbm == 0) {//存在数据为空的就不去计算了            } else {                for (int i = 0; i < size; i++) {                    AppInMax item = adapter.getData().get(i);                    if (i != selectPosition) {                        if (selectItem.So.equals(item.So) && selectItem.Po.equals(item.Po) && selectItem.Skn.equals(item.Skn)) {                            item.Leng = selectItem.Leng;                            item.Wide = selectItem.Wide;                            item.High = selectItem.High;                            item.Cbm = item.Leng * item.Wide * item.High * item.Soquan * 0.001 * 0.001;                            BigDecimal b = new BigDecimal(item.Cbm);                            item.Cbm = b.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();                            item.CbmRate = (item.Cbm - item.BookingCbm) / item.BookingCbm;                            BigDecimal c = new BigDecimal(item.CbmRate);                            item.CbmRate = c.setScale(5, BigDecimal.ROUND_HALF_UP).doubleValue();                        }                    }                }            }        }    }    private String numderIntFormat(int a) {        return a > 0 ? (int) a + "" : "";    }    private String numderDoubleFormat(double dou) {        return dou > 0 ? dou + "" : "";    }    private void setCbm(AppInMax appInMax) {        if (appInMax.Leng == 0 || appInMax.Wide == 0 || appInMax.High == 0 || appInMax.Soquan == 0 || appInMax.BookingCbm == 0) {//存在数据为空的就不去计算了        } else {            appInMax.Cbm = appInMax.Leng * appInMax.Wide * appInMax.High * appInMax.Soquan * 0.001 * 0.001;            BigDecimal b = new BigDecimal(appInMax.Cbm);            appInMax.Cbm = b.setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();            inMax.Cbm = appInMax.Cbm;            tvCbm.setText(df1.format((inMax.Cbm)) + "");            appInMax.CbmRate = (appInMax.Cbm - appInMax.BookingCbm) / appInMax.BookingCbm;            BigDecimal c = new BigDecimal(appInMax.CbmRate);            appInMax.CbmRate = c.setScale(5, BigDecimal.ROUND_HALF_UP).doubleValue();            inMax.CbmRate = appInMax.CbmRate;            tvCbmrate.setText(Math.abs(inMax.CbmRate) > 0 ? df.format((inMax.CbmRate * 100)) + "%" : "");        }    }    private void setAllWeight(double Unitwei, int soquan) {        adapter.getData().get(selectPosition).Rweight = Unitwei * soquan;        BigDecimal b = new BigDecimal(adapter.getData().get(selectPosition).Rweight);        adapter.getData().get(selectPosition).Rweight = b.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();        inMax.Rweight = adapter.getData().get(selectPosition).Rweight;        tvWeight.setText(df.format((inMax.Rweight)) + "");    }    public MyApplication context;    public boolean mBconnect = false;    public int state;    private void connectBt(String s, boolean b) {        //链接之前需要先断开一下        if (context.getState() > 0) {            context.getObject().CON_CloseDevices(context.getState());        }        state = context.getObject().CON_ConnectDevices("RG-MLP80A", s, 200);        if (state > 0) {            WWToast.showShort("链接成功");            mBconnect = true;            context.setState(state);            context.setName("RG-MLP80A");            context.setPrintway(0);            getPrintData(b);        } else {            WWToast.showShort("链接失败");            mBconnect = false;        }    }    public void connect(String IP, boolean b) {        //链接之前需要先断开一下        if (context.getState() > 0) {            context.getObject().CON_CloseDevices(context.getState());        }        //去链接        state = context.getObject().CON_ConnectDevices("RG-MLP80A", IP + ":9100", 200);        if (state > 0) {            WWToast.showShort("链接成功");            SharedPreferenceUtils.getInstance().saveIP(IP);            mBconnect = true;            context.setState(state);            context.setName("RG-MLP80A");            context.setPrintway(0);            getPrintData(b);        } else {            WWToast.showShort("链接失败");            mBconnect = false;        }    }    //打印数据    private void printLabel(PrintInfo info) {        context.getObject().CPCL_PageStart(context.getState(), 504, 800, 0, 1);        context.getObject().CPCL_SetBold(context.getState(), true);        context.getObject().CPCL_AlignType(context.getState(), preDefiniation.AlignType.AT_CENTER.getValue());        context.getObject().CPCL_Print1DBarcode(context.getState(), preDefiniation.BarcodeType.BT_CODE128.getValue(), 0, 60, 4, 3, 250, info.Palletid, "gb2312");        context.getObject().CPCL_PrintString(context.getState(), 0, 340, 1, 1, 0, 24, info.Palletid, "gb2312");        context.getObject().CPCL_PrintString(context.getState(), 10, 400, 1, 1, 0, 24, "DATE: " + getPrintTime(info.CreateTime), "gb2312");        context.getObject().CPCL_PrintString(context.getState(), 10, 460, 1, 1, 0, 24, "SO NO: " + info.Sono, "gb2312");        context.getObject().CPCL_PrintString(context.getState(), 10, 520, 1, 1, 0, 24, "PO NO: " + ((info.Po == null) ? " " : info.Po), "gb2312");        context.getObject().CPCL_PrintString(context.getState(), 10, 580, 1, 1, 0, 24, "ITEM NO: " + ((info.Skn == null) ? " " : info.Skn), "gb2312");        context.getObject().CPCL_PrintString(context.getState(), 10, 640, 1, 1, 0, 24, "QTY: " + info.Pkgs + "/" + info.PalletCtn, "gb2312");        context.getObject().CPCL_PrintString(context.getState(), 10,                700, 1, 1, 0, 24, "操作员: " + ((TextUtils.isEmpty(info.UserName)) ? "" : info.UserName) + "/" + ((TextUtils.isEmpty(info.ZxdzlNo)) ? "" : info.ZxdzlNo), "gb2312");        context.getObject().CPCL_PrintLine(context.getState(), 0, 760, 504, 760, 3);        context.getObject().CON_PageEnd(context.getState(),                context.getPrintway());    }    private String getPrintTime(String timeInfo) {        String s = timeInfo.replace("/Date(", "").replace(")/", "");        long s1 = Long.parseLong(s.substring(0, s.indexOf("+")));        return TimeUtil.getOnlyDateToS(s1);    }    @Override    protected void doOperate() {        getInMaxData();    }    private void getInMaxData() {        showWaitDialog();        RequestParams params = ParamsUtils.getSessionParams(Api.GetAppInMx());        params.addBodyParameter("serial", result.Serial + "");        params.addBodyParameter("queueNo", result.QueueNo);        ZLog.showPost("queueNo" + result.QueueNo);        x.http().get(params, new WWXCallBack("GetAppInMx") {            @Override            public void onAfterSuccessOk(JSONObject data) {                JSONArray jsonArray = data.getJSONArray("Data");                appInMaxes = (ArrayList<AppInMax>) JSON.parseArray(                        jsonArray.toJSONString(), AppInMax.class);                adapter.setData(appInMaxes);            }            @Override            public void onAfterFinished() {                dismissWaitDialog();            }        });    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        // TODO: add setContentView(...) invocation        ButterKnife.bind(this);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode == RESULT_OK) {            if (requestCode == 888) {                ArrayList<DataCbm> lsit22 = (ArrayList<DataCbm>) JSON.parseArray(                        data.getStringExtra(Consts.KEY_DATA), DataCbm.class);                //把重复的去掉                if (lsit22 != null && lsit22.size() > 0) {                    for (int i = 0; i < lsit.size(); i++) {                        if (lsit.get(i).InMxId == lsit22.get(0).InMxId) {                            lsit.remove(i);                        }                    }                }                lsit.addAll(lsit22);                isChange = true;            }        }    }    @OnClick({R.id.tv_lh_input, R.id.tv_conmit, R.id.tv_print})    public void onClick(View view) {        switch (view.getId()) {            case R.id.tv_lh_input:                if (inMax != null) {                    Intent intent = new Intent(this, FuncInCbmActivity.class);                    intent.putExtra(Consts.KEY_DATA, JSON.toJSONString(inMax));                    intent.putExtra("Serial", result.Serial);                    startActivityForResult(intent, 888);                } else {                    WWToast.showShort("请先选择一条数据");                }                break;            case R.id.tv_conmit:                allInfoCommit();                break;            case R.id.tv_print:                if (inMax != null) {                    final CommonDialog dialogTips=      DialogUtils.getCommonDialog(this,"是否需要打印条码纸");                    dialogTips.setRightButtonCilck(new View.OnClickListener() {                        @Override                        public void onClick(View view) {                        getPrintDataNeedPrint(true);                            dialogTips.dismiss();                        }                    });                    dialogTips.setLeftButtonOnClick(new View.OnClickListener() {                        @Override                        public void onClick(View view) {                            getPrintDataNeedPrint(false);                            dialogTips.dismiss();                        }                    });                    dialogTips.setLeftButtonText(R.string.cancel);                    dialogTips.setRightButtonText(R.string.sure);                    dialogTips.show();                } else {                    WWToast.showShort("请先选择一条数据");                }                break;        }    }    private void getPrintDataNeedPrint(final boolean b) {        //不需要打印的话就直接不链接蓝牙了        if(!b){            getPrintData(b);            return;        }        if (context.getState() > 0) {            getPrintData(b);        } else {            if (SharedPreferenceUtils.getInstance().getIsWifi()) {                if (dialog == null) {                    dialog = new InputDialog(FunInMaxListActivity.this, R.style.DialogStyle);                    dialog.getTv_cancel().setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            dialog.dismiss();                        }                    });                    String ip = SharedPreferenceUtils.getInstance().getIP();                    if (!TextUtils.isEmpty(ip)) {                        dialog.setInput(ip);                    }                    dialog.getTv_ok().setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            if (!TextUtils.isEmpty(dialog.getInput()) && RegexUtil.isIpaddress(dialog.getInput())) {                                connect(dialog.getInput(),b);                                dialog.dismiss();                            } else {                                WWToast.showShort("请输入正确IP地址");                            }                        }                    });                }                dialog.show();            } else {                //蓝牙链接                SelectBTDialog selectBTDialog = new SelectBTDialog(FunInMaxListActivity.this, context, new SelectBTDialog.OnSelectOk() {                    @Override                    public void seleckOk(String s) {                        connectBt(s,b);                    }                });                selectBTDialog.show();            }        }    }    private void allInfoCommit() {        boolean isOk = true;        for (int i = 0; i < adapter.getData().size(); i++) {            if (TextUtils.isEmpty(adapter.getData().get(i).Po) || TextUtils.isEmpty(adapter.getData().get(i).Skn)) {                WWToast.showShort(adapter.getData().get(i).So + "  数据中PO和SKN为空");                isOk = false;                break;            }        }        if (!isOk) {            return;        }        showWaitDialog();        JSONObject jsonObject = new JSONObject();        jsonObject.put(Consts.KEY_SESSIONID, MyApplication                .getInstance().getSessionId());        JSONArray array = new JSONArray();        for (int i = 0; i < adapter.getData().size(); i++) {            if ((adapter.getData().get(i).CbmRate > 0.055) || (adapter.getData().get(i).CbmRate < -0.055)) {                WWToast.showShort(adapter.getData().get(i).Skn + " CbmRate大于5.5%，需要复尺.");            }            array.add(adapter.getData().get(i).toJson());        }        jsonObject.put("objs", array);        x.http().post(ParamsUtils.getPostJsonParams(jsonObject, Api.AppInMxCommit()), new WWXCallBack("AppInMxCommit") {            @Override            public void onAfterSuccessOk(JSONObject data) {                JSONArray jsonArray = data.getJSONArray("Data");                ArrayList<Long> rowIdList = (ArrayList<Long>) JSON.parseArray(                        jsonArray.toJSONString(), Long.class);                if (rowIdList.size() > 0) {                    //更新DataCbm                    for (int i = 0; i < lsit.size(); i++) {                        for (int j = 0; j < adapter.getData().size(); j++) {                            if (lsit.get(i).InMxId == adapter.getData().get(j).RowId) {                                lsit.get(i).InMxId = rowIdList.get(j);                            }                        }                    }                    //更新AppInMax                    for (int j = 0; j < adapter.getData().size(); j++) {                        adapter.getData().get(j).RowId = rowIdList.get(j);                    }                }                WWToast.showShort("数据保存成功");                isChange = false;                if (lsit != null && lsit.size() > 0) {                    JSONObject jsonObject = new JSONObject();                    jsonObject.put(Consts.KEY_SESSIONID, MyApplication                            .getInstance().getSessionId());                    JSONArray array = new JSONArray();                    for (int i = 0; i < lsit.size(); i++) {                        array.add(lsit.get(i).toJson());                    }                    jsonObject.put("objs", array);                    x.http().post(ParamsUtils.getPostJsonParams(jsonObject, Api.AppMxCbmCommit()), new WWXCallBack("AppMxCbmCommit") {                        @Override                        public void onAfterSuccessOk(JSONObject data) {                        }                        @Override                        public void onAfterFinished() {                        }                    });                }            }            @Override            public void onAfterFinished() {                dismissWaitDialog();            }        });    }    private void getPrintData(final boolean b) {        showWaitDialog();        RequestParams params = ParamsUtils.getSessionParams(Api.PdaPallet());        params.addBodyParameter("rowId", inMax.RowId + "");        x.http().get(params, new WWXCallBack("PdaPallet") {            @Override            public void onAfterSuccessOk(JSONObject data) {                //获取打印数据打印，0表示正常，1表示已经打印                int code = data.getInteger("Code");                JSONArray jsonArray = data.getJSONArray("Data");                ArrayList<PrintInfo> list = (ArrayList<PrintInfo>) JSON.parseArray(                        jsonArray.toJSONString(), PrintInfo.class);                if(b){                if (code == 1) {                    showRePrintTips(list);                } else {                        print(list);                    }                }else{                    WWToast.showShort("数据已生成");                }            }            @Override            public void onAfterFinished() {                dismissWaitDialog();            }        });    }    /**     * 打印动作     *     * @param list     */    private void print(ArrayList<PrintInfo> list) {        if (list != null && list.size() > 0) {            for (int i = 0; i < list.size(); i++) {                printLabel(list.get(i));            }        }    }    /**     * 重复打印提示     *     * @param list     */    private void showRePrintTips(final ArrayList<PrintInfo> list) {        final CommonDialog commonDialogTwiceConfirm = DialogUtils.getCommonDialogTwiceConfirm(this, "此货已生成板，是否需要重复打印条码？", true);        commonDialogTwiceConfirm.setRightButtonCilck(new View.OnClickListener() {            @Override            public void onClick(View v) {                commonDialogTwiceConfirm.dismiss();                print(list);            }        });        commonDialogTwiceConfirm.show();    }}